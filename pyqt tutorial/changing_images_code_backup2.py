# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'changing_images_designer.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
## QPixmap only works with absolute Path
## add os.path.dirname(__file__) and then join it with the path of the folder and the image
import os
#import sys
#import platform
#from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import (QCoreApplication, QPropertyAnimation, QDate, QDateTime, QMetaObject, QObject, QPoint, QRect, QSize, QTime, QUrl, Qt, QEvent, QRectF)
from PyQt5.QtGui import (QTextDocument, QPen, QBrush, QColor, QConicalGradient, QCursor, QFont, QFontDatabase, QIcon, QKeySequence, QLinearGradient, QPalette, QPainter, QPixmap, QRadialGradient)
from PyQt5.QtWidgets import *

FILEPATH2 = os.path.dirname(__file__)
TURTLE_IMG = "assets\\Tartaruga.png"


class MyCustomLabel(QLabel):
    def __init__(self,parent):
        #Initialize QLabel with its parent
        super().__init__(parent)
        self.margin_width = 70
        self.margin_height = 20

        # definitions for the horizontal lines
        self.margin_lines = 65
        self.width_lines = 8
        
        # definitions for the text
        self.text_offset = 15
        self.text_distance = 22

        # definitions for the labels
        # or 135
        self.layers_start = 100
        self.layers_height = 35

        self.layers_level = []
        ## after the first layer, each next one have to be the layers_height + 1 the previous one
        #self.layers_level.append(self.layers_start + self.layers_height + 1)
        for i in range(13):
            self.layers_level.append(self.layers_start + (self.layers_height+1)*i)

        print(self.layers_level)

        self.layers_offset = 2

    #     self.LAYER_MAP = {
    #     "layer1": (self.margin_width+self.layers_offset, self.layers_level[0], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer2": (self.margin_width+self.layers_offset, self.layers_level[1], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer3": (self.margin_width+self.layers_offset, self.layers_level[2], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer4": (self.margin_width+self.layers_offset, self.layers_level[3], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer5": (self.margin_width+self.layers_offset, self.layers_level[4], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer6": (self.margin_width+self.layers_offset, self.layers_level[5], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer7": (self.margin_width+self.layers_offset, self.layers_level[6], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer8": (self.margin_width+self.layers_offset, self.layers_level[7], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer9": (self.margin_width+self.layers_offset, self.layers_level[8], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer10": (self.margin_width+self.layers_offset, self.layers_level[9], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer11": (self.margin_width+self.layers_offset, self.layers_level[10], self.widthMargin()+self.layers_offset, self.layers_height),
    #     "layer12": (self.margin_width+self.layers_offset, self.layers_level[11], self.widthMargin()+self.layers_offset, self.layers_height),
    # }

    # define a function to return the label width
    def get_width(self):
        return self.frameGeometry().width()

    # define a function to return the label height
    def get_height(self):
        return self.frameGeometry().height()

    # define a function to give the label width a margin
    def widthMargin(self):        
        return self.get_width() - (self.margin_width*2)
    
    # define a function to give the label height a margin
    def heightMargin(self):        
        return self.get_height() - (self.margin_height*2)

    def widthMarginLine(self):
        return self.get_width() + (-self.margin_lines)

    # If I want to draw a line above the first layer
    #def minimumWindowWidthLayers(self):
        #return self.get_width() - (self.margin_lines)  
    

    def drawLayer(self, color, i):
        layer = QPainter(self)
        layer.setPen(QPen(QColor(color), 2, Qt.SolidLine))

        layer.setBrush(QBrush(QColor(color), Qt.SolidPattern))
        layer.drawRect(self.margin_width+self.layers_offset, self.layers_level[i], self.widthMargin()-self.layers_offset*1.5, self.layers_height)

    #def drawHorizontalLine(self, i):
        horizontal_line = QPainter(self)
        horizontal_line.setPen(QPen(Qt.black, 3, Qt.SolidLine))
        
        horizontal_line.drawLine(self.widthMarginLine(), self.layers_level[i], self.widthMarginLine()+self.width_lines, self.layers_level[i]) 

    #def drawVerticalLine(self, i):
        if i != 11:
            vertical_line = QPainter(self)
            vertical_line.setPen(QPen(Qt.black, 3, Qt.SolidLine))

            horizontal_line.drawLine(self.widthMarginLine()+self.width_lines, self.layers_level[i], self.widthMarginLine()+self.width_lines, self.layers_level[i+1])

        # Draw Text
        # layer_text = QTextDocument(self)
        # layer_text.setTextWidth(self.get_width())
        # layer_text.setHtml("<b>Layer 1</b> <style>margin-right:50;</style>")
        # layer_text.drawContents(horizontal_line, QRectF(0,-20,50,50))

        # Draw Text
        if i != 11:
            layers_text = QPainter(self)
            layers_text.drawText(self.widthMarginLine()+self.text_offset,self.layers_level[i]+self.text_distance, f"Layer {i+1}")



    def paintEvent(self, event):
        super().paintEvent(event)

        print("paint label")        

        # Draw Layers
        self.drawLayer('#c9f2e7', 0) # #a5ffe7 # #c7fcee # #cffff2 # #c9f2e7
        self.drawLayer('#a5e1e7', 1)
        self.drawLayer('#75c8dc', 2)
        self.drawLayer('#41b2dc', 3)
        self.drawLayer('#1d9af2', 4)
        self.drawLayer('#0078f2', 5)
        self.drawLayer('#005df2', 6)
        self.drawLayer('#093aff', 7)
        self.drawLayer('#091bff', 8)
        self.drawLayer('#0014cc', 9) # #0217a3 # #0018cf # #0015cf # #0014cc
        self.drawLayer('#0502b0', 10) # #0400c6 # #05038f # #0502b0
        self.drawLayer('#5e512e', 11) # #9e8952 # #857244 # #5e512e  

        # Draw Border of the Graph
        painter = QPainter(self)
        painter.setPen(QPen(Qt.black, 3, Qt.SolidLine))

        painter.drawRect(self.margin_width, self.margin_height, self.widthMargin(), self.heightMargin())
        
        #QRectF target(10.0, 20.0, 80.0, 60.0);
        #QRectF source(0.0, 0.0, 70.0, 40.0);
        #QImage image(":/images/myImage.png");

        # Draw Image
        turtle_width = 50
        turtle_heigth = 40
        painter.drawImage(QRectF((self.get_width()/2 - turtle_width/2 +3),self.layers_level[10]-2,turtle_width,turtle_heigth), QtGui.QImage(os.path.join(FILEPATH2 , TURTLE_IMG)), QRectF(0,0,50,40));
   
             

class MyCustomMainWindow(QMainWindow):    
    def __init__(self):
        super().__init__()
        # before 567 +1+20
        self.WINDOWHEIGHT = 532 +1+ 20 # layers_level[-1] + offset + margin_height
        self.MAXWINDOWWIDTH = 500
        self.MINWINDOWWIDTH = 400

        self.setObjectName("MainWindow")
        #self.resize(800, 600)
        
        self.setMinimumSize(self.MINWINDOWWIDTH, self.WINDOWHEIGHT)
        self.setMaximumSize(self.MAXWINDOWWIDTH, self.WINDOWHEIGHT)
        self.setupUi()

        # remove window frame
        #self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        
    def setupUi(self):        
        self.FILEPATH = os.path.dirname(__file__)
        self.IMG1 = "assets\\deep_sea_2d_1.jpg"
        self.IMG2 = "assets\\deep_sea_2d_2.jpg"
        self.IMG3 = "assets\\deep_sea_2d_3.jpeg"
        self.IMG4 = "assets\\deep_sea_2d_4.png"

        #Create and configure wall
        self.wall = QtWidgets.QWidget(self)
        self.wall.setObjectName("wall")        
        
        #Create and configure wall image
        self.LB_image = MyCustomLabel(self.wall)
        self.LB_image.setGeometry(QtCore.QRect(0, 0, 831, 451))
        self.LB_image.setText("")
        # copy that line bellow, to change the photo when we click the buttons
        self.LB_image.setPixmap(QtGui.QPixmap(os.path.join(self.FILEPATH , self.IMG1))) # use os.path.join to join the path and the folder
        self.LB_image.setScaledContents(True)
        self.LB_image.setObjectName("label")
        
        ##Create abd configure wall buttons
        # self.button1 = QtWidgets.QPushButton(self.wall)
        # self.button1.setGeometry(QtCore.QRect(100, 470, 121, 51))
        # self.button1.setObjectName("button1")
        # self.button2 = QtWidgets.QPushButton(self.wall)
        # self.button2.setGeometry(QtCore.QRect(260, 470, 121, 51))
        # self.button2.setObjectName("button2")
        # self.button3 = QtWidgets.QPushButton(self.wall)
        # self.button3.setGeometry(QtCore.QRect(420, 470, 121, 51))
        # self.button3.setObjectName("button3")
        # self.button4 = QtWidgets.QPushButton(self.wall)
        # self.button4.setGeometry(QtCore.QRect(580, 470, 121, 51))
        # self.button4.setObjectName("button4")

        ##Create and configure menubar
        # self.menubar = QtWidgets.QMenuBar(MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 31))
        # self.menubar.setObjectName("menubar")
        # self.statusbar = QtWidgets.QStatusBar(MainWindow)
        # self.statusbar.setObjectName("statusbar")

        self.setCentralWidget(self.wall)
        # MainWindow.setMenuBar(self.menubar)
        # MainWindow.setStatusBar(self.statusbar)

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MyCustomMainWindow"))
        
        # self.button1.setText(_translate("MainWindow", "1"))        
        # self.button2.setText(_translate("MainWindow", "2"))
        # self.button3.setText(_translate("MainWindow", "3"))
        # self.button4.setText(_translate("MainWindow", "4"))

        #QtCore.QMetaObject.connectSlotsByName(self)

        ## link our buttons with those pic methods
        # self.button1.clicked.connect(self.show_pic1)
        # self.button2.clicked.connect(self.show_pic2)
        # self.button3.clicked.connect(self.show_pic3)
        # self.button4.clicked.connect(self.show_pic4)

    ## creating some methods that will show a different picture for each button
    def show_pic1(self):
        ## paste the line where I've the photo here
        self.LB_image.setPixmap(QtGui.QPixmap(os.path.join(self.FILEPATH , self.IMG1)))

    def show_pic2(self):
        self.LB_image.setPixmap(QtGui.QPixmap(os.path.join(self.FILEPATH , self.IMG2)))
    
    def show_pic3(self):
        self.LB_image.setPixmap(QtGui.QPixmap(os.path.join(self.FILEPATH , self.IMG3)))
    
    def show_pic4(self):
        self.LB_image.setPixmap(QtGui.QPixmap(os.path.join(self.FILEPATH , self.IMG4)))

    # Resize image with window
    def resizeEvent(self, event):
        self.LB_image.resize(self.width(), self.height())
    
    #def paintEvent(self, event):
        #print("test")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    myMainWindow = MyCustomMainWindow()
    myMainWindow.show()
    sys.exit(app.exec_())
    
